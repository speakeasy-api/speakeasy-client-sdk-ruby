# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'
module SpeakeasyClientSDK
  extend T::Sig

  class SDK
    extend T::Sig

    attr_accessor :api_endpoints, :apis, :embeds, :metadata, :plugins, :requests, :schemas

    attr_accessor :security, :language, :sdk_version, :gen_version

    sig do
      params(security: T.nilable(Shared::Security)
             server: String,
             server_url: String,
             url_params: T::Hash[Symbol, String],
             client: Faraday::Request).void
    end
    def initialize(security: nil,
                   server: nil,
                   server_url: nil,
                   url_params: nil,
                   client: nil)

      ## Instantiates the SDK configuring it with the provided parameters.
      # @param [Shared::Security] security The security details required for authentication
      # @param [String] server The server by name to use for all operations
      # @param [String] server_url The server URL to use for all operations
      # @param [Hash<Symbol, String>] url_params Parameters to optionally template the server URL with
      # @param [Faraday::Request] client The faraday HTTP client to use for all operations

      if client.nil?
        client = Faraday.new(request: {
                          params_encoder: Faraday::FlatParamsEncoder
                        }) do |f|
          f.request :multipart, {}
          # f.response :logger
        end
      end

      if !server_url.nil?
        if !url_params.nil?
          server_url = Utils.template_url(server_url, url_params)
        end
      end
      server = SERVER_PROD if server.nil?

      

      @sdk_configuration = SDKConfiguration.new(client, security, server_url, server,)
      init_sdks
    end

    sig { params(params: T.nilable(T::Hash[Symbol, String])).void }
    def config_server_url(params)
      if !params.nil?
        @server_url = Utils.template_url(@server_url, params)
      end
      init_sdks
    end

    sig { params(server: String, params: T.nilable(T::Hash[Symbol, String])).void }
    def config_server(params)
      raise StandardError, 'Invalid server' if !SERVERS.include? server

      config_server_url(params)
      init_sdks
    end

    sig { params(security: Shared::Security).void }
    def config_security(security)
      @security = security
      @sdk_configuration.security = security
    end

    sig { void }
    def init_sdks
      @api_endpoints = ApiEndpoints.new(@sdk_configuration)
      @apis = Apis.new(@sdk_configuration)
      @embeds = Embeds.new(@sdk_configuration)
      @metadata = Metadata.new(@sdk_configuration)
      @plugins = Plugins.new(@sdk_configuration)
      @requests = Requests.new(@sdk_configuration)
      @schemas = Schemas.new(@sdk_configuration)
    end

    
    sig { returns(Utils::FieldAugmented) }
    def validate_api_key
      # validate_api_key - Validate the current api key.
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/auth/validate"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = "speakeasy-sdk/#{@sdk_configuration.language} #{@sdk_configuration.sdk_version} #{@sdk_configuration.gen_version} #{@sdk_configuration.openapi_doc_version}"

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ValidateApiKeyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::Error)
          res.error = out
        end
      end
      res
    end
  end
end
