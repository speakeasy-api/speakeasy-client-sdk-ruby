# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module SpeakeasyClientSDK
  module Shared

    class ValueChange < ::SpeakeasyClientSDK::Utils::FieldAugmented
      extend T::Sig

      # Represents the previous value of the element.
      field :from, String, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('From') } }
      # Represents the current value of the element.
      field :to, String, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('To') } }


      sig { params(from: String, to: String).void }
      def initialize(from: nil, to: nil)
        @from = from
        @to = to
      end
    end

    # A SchemaDiff represents a diff of two Schemas.
    class SchemaDiff < ::SpeakeasyClientSDK::Utils::FieldAugmented
      extend T::Sig

      # Holds every addition change in the diff.
      field :additions, T::Array[String], { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('additions') } }
      # Holds every deletion change in the diff.
      field :deletions, T::Array[String], { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('deletions') } }
      # Holds every modification change in the diff.
      field :modifications, T::Hash[Symbol, Shared::ValueChange], { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('modifications') } }


      sig { params(additions: T::Array[String], deletions: T::Array[String], modifications: T::Hash[Symbol, Shared::ValueChange]).void }
      def initialize(additions: nil, deletions: nil, modifications: nil)
        @additions = additions
        @deletions = deletions
        @modifications = modifications
      end
    end
  end
end
