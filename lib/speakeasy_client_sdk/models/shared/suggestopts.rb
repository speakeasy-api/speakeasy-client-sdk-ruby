# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module SpeakeasyClientSDK
  module Shared
  

    class SuggestOpts < ::SpeakeasyClientSDK::Utils::FieldAugmented
      extend T::Sig


      field :suggestion_type, ::SpeakeasyClientSDK::Shared::SuggestionType, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('suggestion_type'), 'decoder': Utils.enum_from_string(::SpeakeasyClientSDK::Shared::SuggestionType, false) } }

      field :diagnostics, T.nilable(T::Array[::SpeakeasyClientSDK::Shared::Diagnostic]), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('diagnostics') } }


      sig { params(suggestion_type: ::SpeakeasyClientSDK::Shared::SuggestionType, diagnostics: T.nilable(T::Array[::SpeakeasyClientSDK::Shared::Diagnostic])).void }
      def initialize(suggestion_type: nil, diagnostics: nil)
        @suggestion_type = suggestion_type
        @diagnostics = diagnostics
      end
    end
  end
end
