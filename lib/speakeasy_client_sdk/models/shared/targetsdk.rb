# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module SpeakeasyClientSDK
  module Shared
  

    class TargetSDK < ::SpeakeasyClientSDK::Utils::FieldAugmented
      extend T::Sig

      # Timestamp when the event was created in the database.
      field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(false) } }
      # The target of the event.
      field :generate_target, ::String, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('generate_target') } }
      # Unique identifier for each event.
      field :id, ::String, { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('id') } }
      # Remote commit ID.
      field :commit_head, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('commit_head') } }
      # Version of the generated target (post generation)
      field :generate_config_post_version, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('generate_config_post_version') } }
      # gen.lock ID (expected to be a uuid).
      field :generate_gen_lock_id, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('generate_gen_lock_id') } }
      # Indicates whether the target was considered published.
      field :generate_published, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('generate_published') } }
      # The version of the target.
      field :generate_target_version, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('generate_target_version') } }
      # Current working directory relative to the git root.
      field :git_relative_cwd, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('git_relative_cwd') } }
      # Default owner for git remote.
      field :git_remote_default_owner, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('git_remote_default_owner') } }
      # Default repository name for git remote.
      field :git_remote_default_repo, T.nilable(::String), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('git_remote_default_repo') } }
      # Indicates whether the event was successful.
      field :success, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::SpeakeasyClientSDK::Utils.field_name('success') } }


      sig { params(created_at: ::DateTime, generate_target: ::String, id: ::String, commit_head: T.nilable(::String), generate_config_post_version: T.nilable(::String), generate_gen_lock_id: T.nilable(::String), generate_published: T.nilable(T::Boolean), generate_target_version: T.nilable(::String), git_relative_cwd: T.nilable(::String), git_remote_default_owner: T.nilable(::String), git_remote_default_repo: T.nilable(::String), success: T.nilable(T::Boolean)).void }
      def initialize(created_at: nil, generate_target: nil, id: nil, commit_head: nil, generate_config_post_version: nil, generate_gen_lock_id: nil, generate_published: nil, generate_target_version: nil, git_relative_cwd: nil, git_remote_default_owner: nil, git_remote_default_repo: nil, success: nil)
        @created_at = created_at
        @generate_target = generate_target
        @id = id
        @commit_head = commit_head
        @generate_config_post_version = generate_config_post_version
        @generate_gen_lock_id = generate_gen_lock_id
        @generate_published = generate_published
        @generate_target_version = generate_target_version
        @git_relative_cwd = git_relative_cwd
        @git_remote_default_owner = git_remote_default_owner
        @git_remote_default_repo = git_remote_default_repo
        @success = success
      end
    end
  end
end
