# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # This can only be populated when the github app is installed for a repo
      class PullRequestMetadata
        extend T::Sig
        include Crystalline::MetadataFields


        field :status, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }

        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # truncated to first 1000 characters
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }

        field :head_branch, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('head_branch') } }

        field :base_branch, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('base_branch') } }

        field :can_merge, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('can_merge') } }
        # List of github labels
        field :labels, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('labels') } }
        # List of github handles
        field :requested_reviewers, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('requested_reviewers') } }

        sig { params(status: T.nilable(::String), title: T.nilable(::String), created_at: T.nilable(::DateTime), description: T.nilable(::String), head_branch: T.nilable(::String), base_branch: T.nilable(::String), can_merge: T.nilable(T::Boolean), labels: T.nilable(T::Array[::String]), requested_reviewers: T.nilable(T::Array[::String])).void }
        def initialize(status: nil, title: nil, created_at: nil, description: nil, head_branch: nil, base_branch: nil, can_merge: nil, labels: nil, requested_reviewers: nil)
          @status = status
          @title = title
          @created_at = created_at
          @description = description
          @head_branch = head_branch
          @base_branch = base_branch
          @can_merge = can_merge
          @labels = labels
          @requested_reviewers = requested_reviewers
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @title == other.title
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @head_branch == other.head_branch
          return false unless @base_branch == other.base_branch
          return false unless @can_merge == other.can_merge
          return false unless @labels == other.labels
          return false unless @requested_reviewers == other.requested_reviewers
          true
        end
      end
    end
  end
end
