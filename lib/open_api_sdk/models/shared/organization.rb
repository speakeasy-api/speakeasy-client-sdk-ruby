# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # A speakeasy organization
      class Organization
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_type, Models::Shared::AccountType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('account_type'), 'decoder': Utils.enum_from_string(Models::Shared::AccountType, false) } }

        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(false) } }

        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

        field :slug, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('slug') } }

        field :sso_activated, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sso_activated') } }

        field :telemetry_disabled, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('telemetry_disabled') } }

        field :updated_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(false) } }

        field :free_trial_expiry, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('free_trial_expiry'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :internal, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('internal') } }

        field :sso_connection_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sso_connection_id') } }


        sig { params(account_type: Models::Shared::AccountType, created_at: ::DateTime, id: ::String, name: ::String, slug: ::String, sso_activated: T::Boolean, telemetry_disabled: T::Boolean, updated_at: ::DateTime, free_trial_expiry: T.nilable(::DateTime), internal: T.nilable(T::Boolean), sso_connection_id: T.nilable(::String)).void }
        def initialize(account_type: nil, created_at: nil, id: nil, name: nil, slug: nil, sso_activated: nil, telemetry_disabled: nil, updated_at: nil, free_trial_expiry: nil, internal: nil, sso_connection_id: nil)
          @account_type = account_type
          @created_at = created_at
          @id = id
          @name = name
          @slug = slug
          @sso_activated = sso_activated
          @telemetry_disabled = telemetry_disabled
          @updated_at = updated_at
          @free_trial_expiry = free_trial_expiry
          @internal = internal
          @sso_connection_id = sso_connection_id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_type == other.account_type
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @slug == other.slug
          return false unless @sso_activated == other.sso_activated
          return false unless @telemetry_disabled == other.telemetry_disabled
          return false unless @updated_at == other.updated_at
          return false unless @free_trial_expiry == other.free_trial_expiry
          return false unless @internal == other.internal
          return false unless @sso_connection_id == other.sso_connection_id
          true
        end
      end
    end
  end
end
