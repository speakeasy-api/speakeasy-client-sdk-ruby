# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # A token used to publish to a target
      class PublishingToken
        extend T::Sig
        include Crystalline::MetadataFields


        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(false) } }

        field :created_by, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_by') } }

        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

        field :organization_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id') } }

        field :target_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('target_id') } }

        field :target_resource, Models::Shared::TargetResource, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('target_resource'), 'decoder': Utils.enum_from_string(Models::Shared::TargetResource, false) } }

        field :token, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('token') } }

        field :token_name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('token_name') } }

        field :valid_until, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('valid_until'), 'decoder': Utils.datetime_from_iso_format(false) } }

        field :workspace_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('workspace_id') } }

        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :updated_by, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_by') } }


        sig { params(created_at: ::DateTime, created_by: ::String, id: ::String, organization_id: ::String, target_id: ::String, target_resource: Models::Shared::TargetResource, token: ::String, token_name: ::String, valid_until: ::DateTime, workspace_id: ::String, updated_at: T.nilable(::DateTime), updated_by: T.nilable(::String)).void }
        def initialize(created_at: nil, created_by: nil, id: nil, organization_id: nil, target_id: nil, target_resource: nil, token: nil, token_name: nil, valid_until: nil, workspace_id: nil, updated_at: nil, updated_by: nil)
          @created_at = created_at
          @created_by = created_by
          @id = id
          @organization_id = organization_id
          @target_id = target_id
          @target_resource = target_resource
          @token = token
          @token_name = token_name
          @valid_until = valid_until
          @workspace_id = workspace_id
          @updated_at = updated_at
          @updated_by = updated_by
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @created_by == other.created_by
          return false unless @id == other.id
          return false unless @organization_id == other.organization_id
          return false unless @target_id == other.target_id
          return false unless @target_resource == other.target_resource
          return false unless @token == other.token
          return false unless @token_name == other.token_name
          return false unless @valid_until == other.valid_until
          return false unless @workspace_id == other.workspace_id
          return false unless @updated_at == other.updated_at
          return false unless @updated_by == other.updated_by
          true
        end
      end
    end
  end
end
