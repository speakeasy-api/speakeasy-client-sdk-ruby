# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class SuggestRequestBody
        extend T::Sig
        include Crystalline::MetadataFields


        field :oas_summary, Models::Shared::OASSummary, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('oas_summary'), required: true } }

        field :suggestion_type, Models::Shared::SuggestRequestBodySuggestionType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('suggestion_type'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::SuggestRequestBodySuggestionType, false) } }

        field :diagnostics, Crystalline::Array.new(Models::Shared::Diagnostic), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('diagnostics'), required: true } }

        sig { params(oas_summary: Models::Shared::OASSummary, suggestion_type: Models::Shared::SuggestRequestBodySuggestionType, diagnostics: T::Array[Models::Shared::Diagnostic]).void }
        def initialize(oas_summary:, suggestion_type:, diagnostics:)
          @oas_summary = oas_summary
          @suggestion_type = suggestion_type
          @diagnostics = diagnostics
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @oas_summary == other.oas_summary
          return false unless @suggestion_type == other.suggestion_type
          return false unless @diagnostics == other.diagnostics
          true
        end
      end
    end
  end
end
