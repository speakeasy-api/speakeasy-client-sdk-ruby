# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # Remote source configuration
      class RemoteSource
        extend T::Sig
        include Crystalline::MetadataFields


        field :inputs, Crystalline::Array.new(Models::Shared::RemoteDocument), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('inputs'), required: true } }
        # A document hosted in the registry
        field :output, Models::Shared::RemoteDocument, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('output'), required: true } }

        field :overlays, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::RemoteDocument)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('overlays') } }

        sig { params(inputs: T::Array[Models::Shared::RemoteDocument], output: Models::Shared::RemoteDocument, overlays: T.nilable(T::Array[Models::Shared::RemoteDocument])).void }
        def initialize(inputs:, output:, overlays: nil)
          @inputs = inputs
          @output = output
          @overlays = overlays
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @inputs == other.inputs
          return false unless @output == other.output
          return false unless @overlays == other.overlays
          true
        end
      end
    end
  end
end
