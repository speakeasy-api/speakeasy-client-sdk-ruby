# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # A speakeasy workspace
      class Workspace
        extend T::Sig
        include Crystalline::MetadataFields


        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }

        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }

        field :organization_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id'), required: true } }

        field :slug, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('slug'), required: true } }

        field :updated_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :verified, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('verified'), required: true } }

        field :inactive, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('inactive') } }
        # Deprecated. Use organization.telemetry_disabled instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :telemetry_disabled, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('telemetry_disabled') } }

        sig { params(created_at: ::DateTime, id: ::String, name: ::String, organization_id: ::String, slug: ::String, updated_at: ::DateTime, verified: T::Boolean, inactive: T.nilable(T::Boolean), telemetry_disabled: T.nilable(T::Boolean)).void }
        def initialize(created_at:, id:, name:, organization_id:, slug:, updated_at:, verified:, inactive: nil, telemetry_disabled: nil)
          @created_at = created_at
          @id = id
          @name = name
          @organization_id = organization_id
          @slug = slug
          @updated_at = updated_at
          @verified = verified
          @inactive = inactive
          @telemetry_disabled = telemetry_disabled
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @organization_id == other.organization_id
          return false unless @slug == other.slug
          return false unless @updated_at == other.updated_at
          return false unless @verified == other.verified
          return false unless @inactive == other.inactive
          return false unless @telemetry_disabled == other.telemetry_disabled
          true
        end
      end
    end
  end
end
