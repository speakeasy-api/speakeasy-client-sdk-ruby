# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class Tag
        extend T::Sig
        include Crystalline::MetadataFields

        # Format {namespace_id}/{tag}
        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }
        # Human readable tag name
        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }

        field :namespace_name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('namespace_name'), required: true } }

        field :revision_digest, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('revision_digest'), required: true } }

        sig { params(id: ::String, name: ::String, namespace_name: ::String, revision_digest: ::String).void }
        def initialize(id:, name:, namespace_name:, revision_digest:)
          @id = id
          @name = name
          @namespace_name = namespace_name
          @revision_digest = revision_digest
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @namespace_name == other.namespace_name
          return false unless @revision_digest == other.revision_digest
          true
        end
      end
    end
  end
end
