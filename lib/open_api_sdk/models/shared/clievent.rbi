# typed: true
# frozen_string_literal: true


class OpenApiSDK::Models::Shared::CliEvent
  extend ::Crystalline::MetadataFields::ClassMethods
end


class OpenApiSDK::Models::Shared::CliEvent
  def id(); end
  def id=(str_); end
  def execution_id(); end
  def execution_id=(str_); end
  def workspace_id(); end
  def workspace_id=(str_); end
  def speakeasy_api_key_name(); end
  def speakeasy_api_key_name=(str_); end
  def interaction_type(); end
  def interaction_type=(str_); end
  def local_started_at(); end
  def local_started_at=(str_); end
  def created_at(); end
  def created_at=(str_); end
  def speakeasy_version(); end
  def speakeasy_version=(str_); end
  def success(); end
  def success=(str_); end
  def local_completed_at(); end
  def local_completed_at=(str_); end
  def raw_command(); end
  def raw_command=(str_); end
  def duration_ms(); end
  def duration_ms=(str_); end
  def continuous_integration_environment(); end
  def continuous_integration_environment=(str_); end
  def gh_action_run_link(); end
  def gh_action_run_link=(str_); end
  def gh_action_version(); end
  def gh_action_version=(str_); end
  def gh_action_organization(); end
  def gh_action_organization=(str_); end
  def gh_pull_request(); end
  def gh_pull_request=(str_); end
  def gh_changes_committed(); end
  def gh_changes_committed=(str_); end
  def gh_action_ref(); end
  def gh_action_ref=(str_); end
  def gh_action_repository(); end
  def gh_action_repository=(str_); end
  def repo_label(); end
  def repo_label=(str_); end
  def commit_head(); end
  def commit_head=(str_); end
  def hostname(); end
  def hostname=(str_); end
  def git_user_name(); end
  def git_user_name=(str_); end
  def git_user_email(); end
  def git_user_email=(str_); end
  def git_remote_default_owner(); end
  def git_remote_default_owner=(str_); end
  def git_remote_default_repo(); end
  def git_remote_default_repo=(str_); end
  def git_relative_cwd(); end
  def git_relative_cwd=(str_); end
  def generate_target(); end
  def generate_target=(str_); end
  def generate_target_name(); end
  def generate_target_name=(str_); end
  def generate_target_version(); end
  def generate_target_version=(str_); end
  def generate_gen_lock_id(); end
  def generate_gen_lock_id=(str_); end
  def management_doc_checksum(); end
  def management_doc_checksum=(str_); end
  def management_doc_version(); end
  def management_doc_version=(str_); end
  def generate_version(); end
  def generate_version=(str_); end
  def generate_output_tests(); end
  def generate_output_tests=(str_); end
  def generate_config_pre_raw(); end
  def generate_config_pre_raw=(str_); end
  def generate_config_post_raw(); end
  def generate_config_post_raw=(str_); end
  def generate_config_pre_version(); end
  def generate_config_pre_version=(str_); end
  def generate_config_post_version(); end
  def generate_config_post_version=(str_); end
  def generate_config_pre_checksum(); end
  def generate_config_pre_checksum=(str_); end
  def generate_config_post_checksum(); end
  def generate_config_post_checksum=(str_); end
  def generate_eligible_features(); end
  def generate_eligible_features=(str_); end
  def generate_gen_lock_pre_features(); end
  def generate_gen_lock_pre_features=(str_); end
  def generate_gen_lock_post_features(); end
  def generate_gen_lock_post_features=(str_); end
  def generate_gen_lock_pre_doc_version(); end
  def generate_gen_lock_pre_doc_version=(str_); end
  def generate_gen_lock_pre_doc_checksum(); end
  def generate_gen_lock_pre_doc_checksum=(str_); end
  def generate_gen_lock_pre_version(); end
  def generate_gen_lock_pre_version=(str_); end
  def generate_gen_lock_pre_revision_digest(); end
  def generate_gen_lock_pre_revision_digest=(str_); end
  def generate_gen_lock_pre_blob_digest(); end
  def generate_gen_lock_pre_blob_digest=(str_); end
  def generate_gen_lock_pre_namespace_name(); end
  def generate_gen_lock_pre_namespace_name=(str_); end
  def generate_bump_type(); end
  def generate_bump_type=(str_); end
  def generate_number_of_operations_ignored(); end
  def generate_number_of_operations_ignored=(str_); end
  def generate_number_of_operations_used(); end
  def generate_number_of_operations_used=(str_); end
  def generate_number_of_terraform_resources(); end
  def generate_number_of_terraform_resources=(str_); end
  def generate_published(); end
  def generate_published=(str_); end
  def generate_repo_url(); end
  def generate_repo_url=(str_); end
  def publish_package_url(); end
  def publish_package_url=(str_); end
  def publish_package_name(); end
  def publish_package_name=(str_); end
  def publish_package_version(); end
  def publish_package_version=(str_); end
  def publish_package_registry_name(); end
  def publish_package_registry_name=(str_); end
  def source_revision_digest(); end
  def source_revision_digest=(str_); end
  def source_blob_digest(); end
  def source_blob_digest=(str_); end
  def source_namespace_name(); end
  def source_namespace_name=(str_); end
  def lint_report_digest(); end
  def lint_report_digest=(str_); end
  def lint_report_error_count(); end
  def lint_report_error_count=(str_); end
  def lint_report_warning_count(); end
  def lint_report_warning_count=(str_); end
  def lint_report_info_count(); end
  def lint_report_info_count=(str_); end
  def openapi_diff_report_digest(); end
  def openapi_diff_report_digest=(str_); end
  def openapi_diff_base_source_revision_digest(); end
  def openapi_diff_base_source_revision_digest=(str_); end
  def openapi_diff_base_source_blob_digest(); end
  def openapi_diff_base_source_blob_digest=(str_); end
  def openapi_diff_base_source_namespace_name(); end
  def openapi_diff_base_source_namespace_name=(str_); end
  def openapi_diff_breaking_changes_count(); end
  def openapi_diff_breaking_changes_count=(str_); end
  def openapi_diff_bump_type(); end
  def openapi_diff_bump_type=(str_); end
  def error(); end
  def error=(str_); end
  def mermaid_diagram(); end
  def mermaid_diagram=(str_); end
  def last_step(); end
  def last_step=(str_); end
  def test_report_raw(); end
  def test_report_raw=(str_); end
  def workflow_pre_raw(); end
  def workflow_pre_raw=(str_); end
  def workflow_post_raw(); end
  def workflow_post_raw=(str_); end
  def workflow_lock_pre_raw(); end
  def workflow_lock_pre_raw=(str_); end
  def workflow_lock_post_raw(); end
  def workflow_lock_post_raw=(str_); end
end