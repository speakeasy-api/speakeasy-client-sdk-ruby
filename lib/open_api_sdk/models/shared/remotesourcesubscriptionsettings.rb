# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class RemoteSourceSubscriptionSettings
        extend T::Sig
        include Crystalline::MetadataFields


        field :base_spec_namespaces, T::Array[::String], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('base_spec_namespaces') } }

        field :output_namespace, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('output_namespace') } }

        field :overlay_namespaces, T::Array[::String], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('overlay_namespaces') } }

        field :ignored_namespaces, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ignored_namespaces') } }


        sig { params(base_spec_namespaces: T::Array[::String], output_namespace: ::String, overlay_namespaces: T::Array[::String], ignored_namespaces: T.nilable(T::Array[::String])).void }
        def initialize(base_spec_namespaces: nil, output_namespace: nil, overlay_namespaces: nil, ignored_namespaces: nil)
          @base_spec_namespaces = base_spec_namespaces
          @output_namespace = output_namespace
          @overlay_namespaces = overlay_namespaces
          @ignored_namespaces = ignored_namespaces
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @base_spec_namespaces == other.base_spec_namespaces
          return false unless @output_namespace == other.output_namespace
          return false unless @overlay_namespaces == other.overlay_namespaces
          return false unless @ignored_namespaces == other.ignored_namespaces
          true
        end
      end
    end
  end
end
