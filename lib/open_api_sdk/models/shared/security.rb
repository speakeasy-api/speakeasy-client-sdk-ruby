# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class Security
        extend T::Sig
        include Crystalline::MetadataFields


        field :api_key, Crystalline::Nilable.new(::String), { 'security': { 'scheme': true, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' } }

        field :workspace_identifier, Crystalline::Nilable.new(::String), { 'security': { 'scheme': true, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-workspace-identifier' } }

        field :bearer, Crystalline::Nilable.new(::String), { 'security': { 'scheme': true, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' } }

        sig { params(api_key: T.nilable(::String), workspace_identifier: T.nilable(::String), bearer: T.nilable(::String)).void }
        def initialize(api_key: nil, workspace_identifier: nil, bearer: nil)
          @api_key = api_key
          @workspace_identifier = workspace_identifier
          @bearer = bearer
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @api_key == other.api_key
          return false unless @workspace_identifier == other.workspace_identifier
          return false unless @bearer == other.bearer
          true
        end
      end
    end
  end
end
