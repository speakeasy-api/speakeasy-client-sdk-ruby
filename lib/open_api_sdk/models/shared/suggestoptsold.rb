# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class SuggestOptsOld
        extend T::Sig
        include Crystalline::MetadataFields


        field :suggestion_type, Models::Shared::SuggestionType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('suggestion_type'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::SuggestionType, false) } }

        field :diagnostics, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Diagnostic)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('diagnostics') } }

        sig { params(suggestion_type: Models::Shared::SuggestionType, diagnostics: T.nilable(T::Array[Models::Shared::Diagnostic])).void }
        def initialize(suggestion_type:, diagnostics: nil)
          @suggestion_type = suggestion_type
          @diagnostics = diagnostics
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @suggestion_type == other.suggestion_type
          return false unless @diagnostics == other.diagnostics
          true
        end
      end
    end
  end
end
