# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class Workspaces
        extend T::Sig
        include Crystalline::MetadataFields


        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :account_type, Crystalline::Nilable.new(Models::Shared::AccountType), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('account_type'), 'decoder': Utils.enum_from_string(Models::Shared::AccountType, true) } }

        sig { params(id: T.nilable(::String), name: T.nilable(::String), updated_at: T.nilable(::DateTime), account_type: T.nilable(Models::Shared::AccountType)).void }
        def initialize(id: nil, name: nil, updated_at: nil, account_type: nil)
          @id = id
          @name = name
          @updated_at = updated_at
          @account_type = account_type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @updated_at == other.updated_at
          return false unless @account_type == other.account_type
          true
        end
      end
    end
  end
end
