# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class AccessTokenUser
        extend T::Sig
        include Crystalline::MetadataFields


        field :admin, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('admin') } }

        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :display_name, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('display_name') } }

        field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('email') } }

        field :email_verified, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('email_verified') } }

        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }


        sig { params(admin: T.nilable(T::Boolean), created_at: T.nilable(::DateTime), display_name: T.nilable(::String), email: T.nilable(::String), email_verified: T.nilable(T::Boolean), id: T.nilable(::String)).void }
        def initialize(admin: nil, created_at: nil, display_name: nil, email: nil, email_verified: nil, id: nil)
          @admin = admin
          @created_at = created_at
          @display_name = display_name
          @email = email
          @email_verified = email_verified
          @id = id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @admin == other.admin
          return false unless @created_at == other.created_at
          return false unless @display_name == other.display_name
          return false unless @email == other.email
          return false unless @email_verified == other.email_verified
          return false unless @id == other.id
          true
        end
      end
    end
  end
end
