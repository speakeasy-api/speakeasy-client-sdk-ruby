# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    
      # OK
      class GetPublishingTokenPublicMetadataResponseBody
        extend T::Sig
        include Crystalline::MetadataFields


        field :target_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('target_id') } }

        field :target_resource, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('target_resource') } }

        field :workspace_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('workspace_id') } }

        field :organization_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id') } }

        field :valid_until, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('valid_until'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(target_id: T.nilable(::String), target_resource: T.nilable(::String), workspace_id: T.nilable(::String), organization_id: T.nilable(::String), valid_until: T.nilable(::DateTime)).void }
        def initialize(target_id: nil, target_resource: nil, workspace_id: nil, organization_id: nil, valid_until: nil)
          @target_id = target_id
          @target_resource = target_resource
          @workspace_id = workspace_id
          @organization_id = organization_id
          @valid_until = valid_until
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @target_id == other.target_id
          return false unless @target_resource == other.target_resource
          return false unless @workspace_id == other.workspace_id
          return false unless @organization_id == other.organization_id
          return false unless @valid_until == other.valid_until
          true
        end
      end
    end
  end
end
