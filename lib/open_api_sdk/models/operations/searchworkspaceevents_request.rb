# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    

      class SearchWorkspaceEventsRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier of the workspace.
        field :workspace_id, Crystalline::Nilable.new(::String), { 'path_param': { 'field_name': 'workspace_id', 'style': 'simple', 'explode': false } }
        # Unique identifier of the source revision digest.
        field :source_revision_digest, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source_revision_digest', 'style': 'form', 'explode': true } }
        # Unique identifier of the lint report digest.
        field :lint_report_digest, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'lint_report_digest', 'style': 'form', 'explode': true } }
        # Unique identifier of the openapi diff report digest.
        field :openapi_diff_report_digest, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'openapi_diff_report_digest', 'style': 'form', 'explode': true } }
        # Specified interaction type for events.
        field :interaction_type, Crystalline::Nilable.new(Models::Shared::InteractionType), { 'query_param': { 'field_name': 'interaction_type', 'style': 'form', 'explode': true } }
        # A specific gen lock ID for the events.
        field :generate_gen_lock_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'generate_gen_lock_id', 'style': 'form', 'explode': true } }
        # Shared execution ID for cli events across a single action.
        field :execution_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'execution_id', 'style': 'form', 'explode': true } }
        # Whether the event was successful or not.
        field :success, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'success', 'style': 'form', 'explode': true } }
        # Number of results to return.
        field :limit, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }

        sig { params(workspace_id: T.nilable(::String), source_revision_digest: T.nilable(::String), lint_report_digest: T.nilable(::String), openapi_diff_report_digest: T.nilable(::String), interaction_type: T.nilable(Models::Shared::InteractionType), generate_gen_lock_id: T.nilable(::String), execution_id: T.nilable(::String), success: T.nilable(T::Boolean), limit: T.nilable(::Integer)).void }
        def initialize(workspace_id: nil, source_revision_digest: nil, lint_report_digest: nil, openapi_diff_report_digest: nil, interaction_type: nil, generate_gen_lock_id: nil, execution_id: nil, success: nil, limit: nil)
          @workspace_id = workspace_id
          @source_revision_digest = source_revision_digest
          @lint_report_digest = lint_report_digest
          @openapi_diff_report_digest = openapi_diff_report_digest
          @interaction_type = interaction_type
          @generate_gen_lock_id = generate_gen_lock_id
          @execution_id = execution_id
          @success = success
          @limit = limit
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @workspace_id == other.workspace_id
          return false unless @source_revision_digest == other.source_revision_digest
          return false unless @lint_report_digest == other.lint_report_digest
          return false unless @openapi_diff_report_digest == other.openapi_diff_report_digest
          return false unless @interaction_type == other.interaction_type
          return false unless @generate_gen_lock_id == other.generate_gen_lock_id
          return false unless @execution_id == other.execution_id
          return false unless @success == other.success
          return false unless @limit == other.limit
          true
        end
      end
    end
  end
end
