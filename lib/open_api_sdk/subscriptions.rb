# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Subscriptions
    extend T::Sig
    # REST APIs for managing subscriptions

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::ListRegistrySubscriptionsRequest)).returns(::OpenApiSDK::Operations::ListRegistrySubscriptionsResponse) }
    def list_registry_subscriptions(request)
      # list_registry_subscriptions - List Subscriptions
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::ListRegistrySubscriptionsRequest,
        base_url,
        '/v1/workspace/{workspace_id}/registry_subscriptions',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::ListRegistrySubscriptionsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::ListRegistrySubscriptionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::RegistrySubscription])
          res.registry_subscriptions = out
        end
      end
      res
    end


    sig { params(registry_subscription: ::OpenApiSDK::Shared::RegistrySubscription, workspace_id: T.nilable(::String)).returns(::OpenApiSDK::Operations::CreateSubscriptionResponse) }
    def create_subscription(registry_subscription, workspace_id = nil)
      # create_subscription - Create Subscription
      request = ::OpenApiSDK::Operations::CreateSubscriptionRequest.new(
        
        registry_subscription: registry_subscription,
        workspace_id: workspace_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::CreateSubscriptionRequest,
        base_url,
        '/v1/workspace/{workspace_id}/registry_subscriptions',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :registry_subscription, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::CreateSubscriptionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::RegistrySubscription)
          res.registry_subscription = out
        end
      end
      res
    end
  end
end
